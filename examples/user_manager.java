/* Robby Sodhi
 * J.Bains
 * 2023
 * use_manager wraps all of the REST_client methods (and subsequently the server headers) in a user friendly manner
 * intended to be a library/class you can use to interact with the server and its stock/user data
 * child of REST_cleint
 */


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

//extends REST_client (child of it)
public class user_manager extends REST_client {
  String id = ""; //a random string generated by the server that represnets a single user (allows us to store this instead of username + password, security)
  
  //constructor, takes the url (from the ssdp client), username, passwoord a boolean flag (if it is true, it will try to create the user, if false, log the user in) 
  public user_manager(String url, String username, String password, Boolean createUser) throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException,javax.naming.AuthenticationException {
    //call the super constructor (rest_client constructor)
    super(url);
    
    //if the createUser flag is true, create the user otherwise log them in. Note, both login and create user retrieve the user id so there is no need to do them both
    //once we retrieve the user id store it so we can use it to authetnicate as that user later (the server uses the id to find the user and their data)
    if (createUser){
      this.id = super.create_user(username, password);
    } else{
      this.id = super.login_user(username, password);
    }
  }
  
    //stock clients like yahoo finance usually let you select a date range for the data they show you on the graph
    //as the server is setup to take start/end dates in the format yyyy-mm-dd, this will create the equivalents of that for 7 days prior, 30 days prior, 365 days prior and all
    private static String[] createDateRange(String days) {
        String[] dateRange = new String[2]; //holds our start and end strings in the format yyyy-mm-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); //create a date format in the format the server wants
        Calendar cal = Calendar.getInstance(); //calendar instance so we can calculate time and get todays day
        cal.add(Calendar.DATE, -1); //set it back a day so server is happy (weird bug in yfinance, explained it in the python code)
        Date today = cal.getTime(); //get todays date (minus one, because of the line above)
        
        //switch for 7, 30, 365 or max. Calculates the corresponding start/end dates (I.e 7 would start at today - 7 days and end at today)
        switch (days) {
            case "7":
                cal.add(Calendar.DATE, -7);
                dateRange[0] = sdf.format(cal.getTime());
                dateRange[1] = sdf.format(today);
                break;
            case "30":
                cal.add(Calendar.DATE, -30);
                dateRange[0] = sdf.format(cal.getTime());
                dateRange[1] = sdf.format(today);
                break;
            case "365":
                cal.add(Calendar.DATE, -365);
                dateRange[0] = sdf.format(cal.getTime());
                dateRange[1] = sdf.format(today);
                break;
            case "max":
                dateRange[1] = sdf.format(today);
                dateRange[0] = "1800-01-01";
                break;
            default:
                throw new IllegalArgumentException("Invalid range input (7, 30, 365, max allowed)");
        }
        return dateRange;
    }
    
  
    //wraps the rest_client get_balance method
    //uses the internally stored id to call it
  public Double get_balance() throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, javax.naming.AuthenticationException {
   return super.get_balance(this.id); 
  }
  
   //wraps the rest_client get_user_ticker_data method
    //uses the internally stored id to call it
  public String[][] get_user_ticker_data() throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, javax.naming.AuthenticationException{
   return super.get_user_ticker_data(this.id); 
  }
  
  //wraps the rest_client get_current_stock_price method
  //takes a ticker as an argmuent
   public Double get_current_stock_price(String ticker) throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, IllegalArgumentException{
    return super.get_current_stock_price(ticker);
    
    
   }
    //wraps the rest_client buy_stock method
    //uses the internally stored id to call it
   //takes a ticker and a amount
   public void buy_stock(String ticker, String amount) throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, javax.naming.AuthenticationException{
     super.buy_stock(this.id, ticker, amount); 
  }
   //wraps the rest_client sell_stock method
    //uses the internally stored id to call it
   //takes a ticker and a amount
    public void sell_stock(String ticker, String amount) throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, javax.naming.AuthenticationException{
     super.sell_stock(this.id, ticker, amount); 
  }
    //wraps the rest_client get_stock_history_by ticker method
    //takes a ticker and a range number, puts that range number into the createDateRange method and subsequently uses the return start/end dates to call the rest_client method
   public String[][] get_stock_history_by_ticker(String ticker, String range) throws java.net.MalformedURLException, java.io.IOException, org.json.simple.parser.ParseException, javax.naming.AuthenticationException{
     String[] start_end = this.createDateRange(range);
     System.out.println(start_end[0]);
     System.out.println(start_end[1]);
     
     String[][] data = super.get_stock_history_by_ticker(ticker, start_end[0], start_end[1]);
     
     return data;
   }
}
   
  